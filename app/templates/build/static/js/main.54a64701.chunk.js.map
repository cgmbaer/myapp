{"version":3,"sources":["components/Rezept/edit.png","components/Toolbar/Toolbar.js","components/Rezept/Rezept.js","components/Einkauf/Einkauf.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","toolbar","props","className","href","exact","to","recipe","id","titel","bild_url","personen","zutaten","zubereitung","Rezept","src","alt","width","edit_bild","height","map","value","index","table","val","length","push","key","align","style","minWidth","marginLeft","marginTop","Einkauf","App","path","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.54a64701.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/edit.3f326698.png\";","import React from 'react';\r\nimport {NavLink} from 'react-router-dom';\r\nimport './Toolbar.css'\r\n\r\nconst toolbar = props => (\r\n    <header className=\"toolbar\">\r\n        <nav className=\"toolbar__navigation\">\r\n            <div></div>\r\n            <div className=\"toolbar__logo\">\r\n                <a href=\"/\">THE LOGO</a>\r\n            </div>\r\n            <div className=\"toolbar__navigation-items\">\r\n                <ul>\r\n                    <li><NavLink exact to=\"/\">Rezept</NavLink></li>\r\n                    <li><NavLink to=\"/Einkauf/\">Einkauf</NavLink></li>\r\n                </ul>\r\n            </div>\r\n        </nav>\r\n    </header>\r\n);\r\n\r\nexport default toolbar;","import React from 'react';\r\nimport './Rezept.css';\r\nimport edit_bild from './edit.png';\r\n\r\nvar recipe = {\r\n  id: 1,\r\n  titel: \"Thunfischfilet in Zimt-Sesam-Kruste auf Chili-Mango-Salat\",\r\n  bild_url: \"https://img.chefkoch-cdn.de/rezepte/1298601234964040/bilder/721436/crop-600x400/thunfischfilet-in-zimt-sesam-kruste-auf-chili-mango-salat.jpg\",\r\n  personen: 4,\r\n  zutaten: [\r\n    [\r\n      'Zutaten:',\r\n      [400, 'g', 'Thunfisch, (Sushiqualität)'],\r\n      [1, 'EL', 'Zimt'],\r\n      [2, 'EL', 'Sesam, heller'],\r\n      [2, 'EL', 'Sesam, schwarzer'],\r\n      [null, null, 'Sesam, schwarzer'],\r\n      [null, null, 'Fleur de Sel'],\r\n      [null, null, 'Pfeffer, schwarzer aus der Mühle'],\r\n    ],\r\n    [\r\n      'Für den Salat',\r\n      [1, null, 'Mango(s)'],\r\n      [1, null, 'Schalotte(n)'],\r\n      [1, 'Hand', 'Minze'],\r\n      [1, 'Hand', 'Koriandergrün'],\r\n      [1, 'kleine', 'Paprikaschote(n), rot'],\r\n      [2, null, 'Chilischote(n), rot'],\r\n      [1, 'EL', 'Olivenöl'],\r\n      [null, null, 'Balsamico, weißer'],\r\n      [null, null, 'Salz'],\r\n      [1, null, 'Orange(n), unbehandelt'],\r\n    ]\r\n  ],\r\n  zubereitung: [\r\n    'Die Mango schälen und in kleine Würfel schneiden. Die Schalotte fein hacken. Minze und Koriander ebenfalls fein hacken. Die Paprika fein würfeln. Die Chili entkernen und ebenfalls fein würfeln.',\r\n    'Salz, weißer Balsamico und Olivenöl zu einer Marinade verrühren. Alle Zutaten zu einem Salat vermischen und ca. 30 Minuten einziehen lassen. Die Schale der Orange in Zesten reißen.',\r\n    'Salz und Pfeffer mit dem Zimt mischen und auf einen Teller geben. Beide Sesamsorten mischen und auf einen Teller geben. Den Thunfisch portionieren, so dass er nach dem Braten in Scheiben geschnitten werden kann.',\r\n    'Den Thunfisch in der Gewürzmischung wälzen, damit er davon überzogen ist. Anschließend etwas mit Wasser befeuchten und im Sesam wälzen. Der Sesam muss am Fisch haften.',\r\n    'Den Thunfisch von allen Seiten anbraten. Er sollte innen rot bleiben! Ich mache dies immer in einer guten beschichteten Pfanne, ohne Fett. Es kann aber auch mit Olivenöl gemacht werden.',\r\n    'Den gebratenen Thunfisch in dünne Scheiben schneiden.',\r\n  ]\r\n}\r\n\r\nfunction Rezept(props) {\r\n\r\n  const table_zutaten = () => (\r\n    recipe.zutaten.map((value, index) => {\r\n      let table = [];\r\n      for(let val = 1; val < value.length; val++){\r\n        table.push(\r\n          <tr key={val}>\r\n            <td align='right'><div style={{ minWidth: '20px' }}>{value[val][0]}</div></td>\r\n            <td><div style={{ marginLeft: '0.5rem', minWidth: '60px' }}>{value[val][1]}</div></td>\r\n            <td>{value[val][2]}</td>\r\n          </tr>\r\n        )\r\n      }\r\n      return (\r\n        <div key={index}>\r\n          <div className='table__header' key={index}>{value[0]}</div>\r\n            <table>\r\n              <tbody>\r\n                {table}\r\n              </tbody>\r\n            </table>\r\n        </div>\r\n      )\r\n    })\r\n  );\r\n\r\n  const table_zubereitung = () => (\r\n    recipe.zubereitung.map((value,index) => {\r\n      return (\r\n      <div key={index} style={{ marginTop: '1rem' }}><b>{`${index + 1}. `}</b>{value}</div>\r\n      )\r\n    })\r\n  )\r\n\r\n  return (\r\n    <div className=\"rezept\">\r\n      <div className=\"rezept__bild\">\r\n        <img src={recipe.bild_url} alt={recipe.titel} width='100%'></img>\r\n      </div>\r\n      <div className=\"rezept__header\">\r\n        <div className=\"rezept__titel\">{recipe.titel}</div>\r\n        <div className=\"rezept__bearbeiten\">\r\n          <img src={edit_bild} alt='edit' height='50px' width='50px'></img>\r\n        </div>\r\n      </div>\r\n      <div className=\"rezept__beschreibung\">\r\n        <div className=\"rezept__einkauf\">\r\n          <div className=\"rezept__personen\"></div>\r\n          <div className=\"rezept__hinzufügen\"></div>\r\n        </div>\r\n        <div className=\"rezept__zutaten\">{table_zutaten()}</div>\r\n        <div className=\"rezept__zubereitung\">{table_zubereitung()}</div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Rezept;\r\n","import React from 'react';\r\n\r\nfunction Einkauf() {\r\n  return (\r\n    <div className=\"App\">\r\n      <main style={{ marginTop: '64px' }}>\r\n        <p>Das ist die Einkaufsliste</p>\r\n      </main>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Einkauf;\r\n","import React from 'react';\nimport {BrowserRouter,Route,Switch} from 'react-router-dom';\nimport Toolbar from './components/Toolbar/Toolbar';\nimport Rezept from './components/Rezept/Rezept';\nimport Einkauf from './components/Einkauf/Einkauf';\n\nfunction App() {\n  return (\n    <BrowserRouter>\n    <div className=\"App\">\n        <Toolbar />\n        <Switch>\n          <Route exact path=\"/\" component={Rezept}/>\n          <Route path=\"/Einkauf\" component={Einkauf}/>\n        </Switch>\n    </div>\n    </BrowserRouter>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}